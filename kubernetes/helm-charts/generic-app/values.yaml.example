# This is a YAML-formatted file.
# Declare variables to be passed into your templates.


app:
  projectName: project01
  appName: nginx
  description: A Helm chart for Kubernetes to setup nginx for demo purpose
  type: application
  version: 0.1.0
  appVersion: 1.0.0
  environment: demo

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "stable-alpine"

imagePullSecrets: []
  # - name: regcred

  ### Command to create docker registery secret
  #
  #  kubectl create secret docker-registry <secret-name> \
  #  --docker-server=https://registry.gitlab.com \
  #  --docker-username=<username> --docker-password=<password> \
  #  -n <namespace>
  #

serviceAccount:
  # Specifies whether a service account should be created
  # If create is true, a name is generated using the appName and appEnv
  create: true
  # Annotations to add to the service account
  annotations: {}


deployment:
  enabled: true
  replicaCount: 1

  # Executed command when container gets started
  command: []
    # - "/bin/sh"

  # Pass arguments to container process
  args: []
    # - "-c"
    # - 'while true; do echo "$(date) - Welcome to HelmDemo"; sleep 10;done'

statefulset:
  enabled: false
  replicaCount: 1

  # Executed command when container gets started
  command: []
    # - "/bin/sh"

  # Pass arguments to container process
  args: []
    # - "-c"
    # - 'while true; do echo "$(date) - Welcome to HelmDemo"; sleep 10;done'

  persistentVolumeClaim:
    path: /app/data
    size: 5Gi
  # Define other volumes in `volume`

daemonset:
  enabled: false
  # Executed command when container gets started
  command:
    - "/bin/sh"

  # Pass arguments to container process
  args:
    - "-c"
    - 'while true; do echo "$(date) - Welcome to HelmDemo"; sleep 10;done'

job:
  enabled: false

  # Specify the number of retries before considering a Job as failed.
  backoffLimit: 4

  # Number of pods running at any instant
  parallelism: 1

  # the Job is considered complete when there have been `completions`` successfully completed Pods
  completions: 1

  # Executed command when container gets started
  command:
    - "/bin/sh"

  # Pass arguments to container process
  args:
    - "-c"
    - 'while true; do echo "$(date) - Welcome to HelmDemo"; sleep 10;done'

cronjob:
  enabled: false

  schedule: "*/2 * * * *"

  # Executed command when container gets started
  command:
    - "/bin/sh"

  # Pass arguments to container process
  args:
    - "-c"
    - 'while true; do echo "$(date) - Welcome to HelmDemo"; sleep 10;done'

# Expose the container port
containerPort: 80

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

service:
  enabled: true
  type: ClusterIP


ingress:
  enabled: true
  labels: {}
  annotations:
    # kubernetes.io/ingress.class: nginx # or public
    nginx.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/cluster-issuer: "letsencrypt-prod"

    ### Enable CORS
    # nginx.ingress.kubernetes.io/enable-cors: "true"
    # nginx.ingress.kubernetes.io/cors-allow-methods: "PUT, PATCH, GET, POST, OPTIONS, DELETE"
    # nginx.ingress.kubernetes.io/cors-allow-origin: "https://web.example.com"
    # nginx.ingress.kubernetes.io/cors-allow-credentials: "true"

  hostName: web01.example.com
  tls:
    enabled: true
    # By default use Lets Encrypt SSL generated by cert-manager and stored in `appName-appEnv-tls` secret
    # Or you can store custom SSL to above tls secret
    ### Command to create TLS secret
    # kubectl create secret tls <appName-appEnv-tls> \
    #                           --cert=<path/to/cert/file> \
    #                           --key=<path/to/key/file>



autoscaling:
  enabled: false
  target: deployment # Autoscale either deployment or statefulset
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

vars: {}
  ### Define the vars in `key: value` format
  # param1: value1
  # param2: value2
  # param3: value3

envVars: {}
  ### Define the ENV vars in `key: value` format
  # API_URL: "api-dev.example.com"
  # API_USER: "myuser"
  # API_PASS: "mypass"


# Container readiness and liveness probe initial delay and timeout
# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
#
probes: {}
  # startupProbe:
  #   httpGet:
  #     path: /
  #     port: 80
  #     scheme: HTTP
  #   periodSeconds: 10
  #   timeoutSeconds: 10
  #   failureThreshold: 5

  # livenessProbe:
  #   httpGet:
  #     path: /
  #     port: 80
  #     scheme: HTTP
  #   initialDelaySeconds: 30
  #   periodSeconds: 15
  #   timeoutSeconds: 10
  #   failureThreshold: 5

  # readinessProbe:
  #   httpGet:
  #     path: /
  #     port: 80
  #     scheme: HTTP
  #   initialDelaySeconds: 30
  #   periodSeconds: 15
  #   timeoutSeconds: 10
  #   failureThreshold: 5


volumes:
  emptyDir:
    # Path within the container at which the volume should be mounted.
    # Must not contain ':'.
    mountPath: /app/test-emptydir

  hostPath:
    # Path within the container at which the volume should be mounted.
    # Must not contain ':'.
    mountPath: /app/test-hostpath

    # path of the directory/file on the host
    path: /data
    # this field is optional, For more info, see - https://kubernetes.io/docs/concepts/storage/volumes/#hostpath
    type: Directory

  persistentVolumeClaim:
    # Path within the container at which the volume should be mounted.
    # Must not contain ':'.
    mountPath: /app/test-pvc

    # For more info, see - https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes
    accessModes:
      - ReadWriteOnce
    # Name of the StorageClass required by the claim - https://kubernetes.io/docs/concepts/storage/persistent-volumes/#class-1
    storageClassName: nfs
    requests: 5Gi
    limits: 8Gi

  secret:
    # Path within the container at which the volume should be mounted.
    # Must not contain ':'.
    mountPath: /app/test-secretfile

    defaultMode: 0644
    # The below secret must be created from file
    secretName: test-secret
    optional: false

  configMap:
    # Path within the container at which the volume should be mounted.
    # Must not contain ':'.
    mountPath: /app/test-cfg

    defaultMode: 0644
    # The below configMap must be created from file
    name: test-cfg
    optional: false
